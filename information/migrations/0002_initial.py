# Generated by Django 5.0.4 on 2025-08-18 20:54

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('information', '0001_initial'),
        ('user', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='company',
            name='sales_team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='user.team', verbose_name='Sales Team'),
        ),
        migrations.AddField(
            model_name='company',
            name='company_group',
            field=models.ForeignKey(blank=True, max_length=140, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companies', to='information.companygroup', verbose_name='Company Group'),
        ),
        migrations.AddField(
            model_name='contact',
            name='company',
            field=models.ManyToManyField(related_name='contacts', to='information.company'),
        ),
        migrations.AddField(
            model_name='contact',
            name='default_person_in_contact_of',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_person_in_contact', to='information.company'),
        ),
        migrations.AddField(
            model_name='contactcompanyhistory',
            name='company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_history', to='information.company'),
        ),
        migrations.AddField(
            model_name='contactcompanyhistory',
            name='contact',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_history', to='information.contact'),
        ),
        migrations.AddField(
            model_name='company',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='information.country'),
        ),
        migrations.AddField(
            model_name='city',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cities', to='information.country'),
        ),
        migrations.AddField(
            model_name='historicalvessel',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalvessel',
            name='manager_company',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='information.companygroup'),
        ),
        migrations.AddField(
            model_name='historicalvessel',
            name='owner_company',
            field=models.ForeignKey(blank=True, db_constraint=False, limit_choices_to=models.Q(('company_type__contains', 'Customer')), null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='information.company'),
        ),
        migrations.AddField(
            model_name='vessel',
            name='manager_company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='information.companygroup'),
        ),
        migrations.AddField(
            model_name='vessel',
            name='owner_company',
            field=models.ForeignKey(limit_choices_to=models.Q(('company_type__contains', 'Customer')), null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vessels', to='information.company'),
        ),
        migrations.AddField(
            model_name='vessel',
            name='person_in_contacts',
            field=models.ManyToManyField(limit_choices_to=models.Q(('company__company_type__contains', 'Customer')), to='information.contact'),
        ),
        migrations.AlterUniqueTogether(
            name='contactcompanyhistory',
            unique_together={('company', 'contact')},
        ),
    ]
